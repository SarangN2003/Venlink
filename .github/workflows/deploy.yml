name: Deploy to AWS Fargate

on:
  push:
    branches:
      - master  # Change this to match your branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        env:
          IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        run: |
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Register new ECS task definition
        id: register-task
        run: |
          TASK_DEFINITION=$(aws ecs register-task-definition \
            --family ${{ secrets.TASK_DEFINITION_NAME }} \
            --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "256" \
            --memory "512" \
            --container-definitions '[{
              "name": "${{ secrets.CONTAINER_NAME }}",
              "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest",
              "essential": true,
              "portMappings": [{"containerPort": 80, "hostPort": 80}]
            }]' \
            --query "taskDefinition.taskDefinitionArn" --output text)
          echo "TASK_DEFINITION=$TASK_DEFINITION" >> $GITHUB_ENV

      - name: Ensure ECS Service is Active
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ secrets.CLUSTER_NAME }} --services ${{ secrets.ECS_SERVICE_NAME }} --query "services[0].status" --output text)
          if [[ "$SERVICE_STATUS" != "ACTIVE" ]]; then
            echo "ECS Service is not ACTIVE. Exiting."
            exit 1
          fi

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition $TASK_DEFINITION \
            --force-new-deployment

      - name: Wait for ECS Service to Stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }}
