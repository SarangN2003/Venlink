name: Deploy to AWS Fargate

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # Updated to v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2  # Updated to v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}  # Note: Matches your secret name (typo preserved)

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1  # More secure than CLI login

    - name: Build, tag, and push Docker image
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/venlink:${{ github.sha }} .
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/venlink:${{ github.sha }}
        echo "IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/venlink:${{ github.sha }}" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
      TASK_DEFINITION_NAME: ${{ secrets.TASK_DEFINITION_NAME }}
      TASK_ROLE_ARN: ${{ secrets.TASK_ROLE }}
      TASK_EXECUTION_ROLE_ARN: ${{ secrets.TASK_EXECUTION_ROLE }}

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Sanitize service name
      run: |
        ECS_SERVICE_NAME_CLEAN=$(echo "$ECS_SERVICE_NAME" | tr ' ' '-' | tr '/' '-')
        echo "ECS_SERVICE_NAME_CLEAN=$ECS_SERVICE_NAME_CLEAN" >> $GITHUB_ENV

    - name: Get current task definition
      id: get-task-definition
      run: |
        TASK_DEF_ARN=$(aws ecs describe-task-definition \
          --task-definition $TASK_DEFINITION_NAME \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Register new task definition
      run: |
        aws ecs register-task-definition \
          --family $TASK_DEFINITION_NAME \
          --execution-role-arn $TASK_EXECUTION_ROLE_ARN \
          --task-role-arn $TASK_ROLE_ARN \
          --network-mode awsvpc \
          --cpu 256 \
          --memory 512 \
          --requires-compatibilities FARGATE \
          --container-definitions '[
            {
              "name": "containervenlink",
              "image": "${{ env.IMAGE_URI }}",
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/$ECS_SERVICE_NAME_CLEAN",
                  "awslogs-region": "${{ secrets.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]'

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $ECS_SERVICE_NAME_CLEAN \
          --task-definition $TASK_DEFINITION_NAME \
          --force-new-deployment

    - name: Wait for service stabilization
      run: |
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $ECS_SERVICE_NAME_CLEAN
