name: Deploy to AWS Fargate

on:
  push:
    branches:
      - master  # Trigger the action on push to the master branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_NAME }} .

    - name: Tag Docker image
      run: |
        docker tag ${{ secrets.ECR_REPOSITORY_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Register new ECS task definition
      run: |
        aws ecs register-task-definition \
          --family ${{ secrets.TASK_DEFINITION_NAME }} \
          --execution-role-arn ${{ secrets.ECS_EXECUTION_ROLE_ARN }} \
          --network-mode awsvpc \
          --requires-compatibilities FARGATE \
          --cpu "256" \
          --memory "512" \
          --container-definitions '[{"name":"${{ secrets.ECR_REPOSITORY_NAME }}","image":"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest","essential":true,"portMappings":[{"containerPort":80,"hostPort":80}]}]'

    - name: Update ECS service with new task definition
      run: |
        NEW_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ secrets.TASK_DEFINITION_NAME }} --query 'taskDefinition.taskDefinitionArn' --output text)
        aws ecs update-service \
          --cluster ${{ secrets.CLUSTER_NAME }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --task-definition "$NEW_TASK_DEFINITION"

    - name: Wait for ECS service to stabilize
      run: |
        aws ecs wait services-stable \
          --cluster ${{ secrets.CLUSTER_NAME }} \
          --services ${{ secrets.ECS_SERVICE }}
