name: Deploy to AWS Fargate

on:
  push:
    branches:
      - master  # Trigger the action on push to the master branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
        docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_NAME }} .

    - name: Tag Docker image
      run: |
        docker tag ${{ secrets.ECR_REPOSITORY_NAME }}:latest \
        ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      CLUSTER_NAME: "VenlinkLogin"  # Correct ECS Cluster Name
      ECS_SERVICE_NAME: "venlinkservices"  # Correct ECS Service Name
      TASK_DEFINITION_NAME: "VenlinkTask"  # Task Definition Family Name (without revision)
      TASK_ROLE_ARN: "arn:aws:iam::203918861989:role/VenlinkFargateRole"  # Task Role ARN
      EXECUTION_ROLE_ARN: "arn:aws:iam::203918861989:role/ecsTaskExecutionRole"  # Task Execution Role ARN

    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get latest task definition
      id: get-task-definition
      run: |
        LATEST_TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME)
        echo "$LATEST_TASK_DEF" > task-def.json

    - name: Register new task definition with updated roles
      id: register-task-def
      run: |
        NEW_TASK_DEF=$(jq '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy) |
          .taskRoleArn = env.TASK_ROLE_ARN | 
          .executionRoleArn = env.EXECUTION_ROLE_ARN' task-def.json)

        echo "$NEW_TASK_DEF" > new-task-def.json

        REGISTERED_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json)
        TASK_DEF_ARN=$(echo "$REGISTERED_TASK_DEF" | jq -r '.taskDefinition.taskDefinitionArn')

        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Update ECS service with new task definition
      run: |
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $ECS_SERVICE_NAME \
          --task-definition $TASK_DEF_ARN \
          --region ${{ secrets.AWS_REGION }}

    - name: Wait for ECS service to stabilize
      run: |
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $ECS_SERVICE_NAME \
          --region ${{ secrets.AWS_REGION }}
